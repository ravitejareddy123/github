name: CI/CD Pipeline with AI Agents

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: myimage
  K8S_NAMESPACE: default
  DEPLOYMENT_NAME: microservice

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Debug Dockerfile
        run: |
          echo "Dockerfile contents:"
          cat Dockerfile || echo "Dockerfile not found"
      - name: Debug build_agent.py
        run: |
          echo "build_agent.py contents:"
          cat build_agent.py
          echo "Checking syntax..."
          python -m py_compile build_agent.py || echo "Syntax check failed"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Run Build Agent
        run: python build_agent.py || echo "Build agent failed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug Build Report
        run: |
          ls -l build_report.json || echo "No build_report.json found"
          cat build_report.json || echo "No build_report.json found"
      - name: Upload Build Report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build_report.json
        if: always()

  test:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Clean up disk space
        run: |
          docker system prune -af || echo "Disk cleanup failed"
          rm -rf /home/runner/.cache/* || echo "Cache cleanup failed"
          df -h
      - name: Run Flask App for Testing
        run: |
          docker run -d -p 5000:5000 ghcr.io/ravitejareddy123/myimage:latest || echo "Failed to run Docker container for testing"
          sleep 90
        continue-on-error: true
      - name: Debug Container Status
        run: |
          docker ps -a
          docker logs $(docker ps -q --filter "ancestor=ghcr.io/ravitejareddy123/myimage:latest") || echo "No container logs"
          curl -m 5 http://localhost:5000/health || echo "Failed to curl health endpoint"
        continue-on-error: true
      - name: Run Test Agent
        run: python test_agent.py || echo "Test agent failed"
      - name: Debug Test Report
        run: |
          ls -l test_report.json || echo "No test_report.json found"
          cat test_report.json || echo "No test_report.json found"
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test_report.json
        if: always()

  deploy:
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Clean up disk space
        run: |
          docker system prune -af || echo "Disk cleanup failed"
          rm -rf /home/runner/.cache/* || echo "Cache cleanup failed"
          df -h
      - name: Debug kind-config.yaml
        run: |
          echo "kind-config.yaml contents:"
          cat kind-config.yaml || echo "kind-config.yaml not found"
          file kind-config.yaml || echo "kind-config.yaml not found"
          yamllint kind-config.yaml || echo "yamllint not installed or failed"
      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint
      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Docker Image
        run: docker pull ${{ env.DOCKER_REGISTRY }}/ravitejareddy123/${{ env.DOCKER_IMAGE }}:latest || echo "Failed to pull image"
      - name: Create KinD Cluster
        run: kind create cluster --name demo-cluster --config kind-config.yaml || echo "Failed to create KinD cluster"
      - name: Debug KinD Cluster
        run: |
          kind get clusters
          kubectl cluster-info || echo "No cluster info available"
          kubectl get nodes || echo "No nodes available"
          kubectl get pods --all-namespaces || echo "No pods available"
        continue-on-error: true
      - name: Load Docker Image into KinD
        run: kind load docker-image ${{ env.DOCKER_REGISTRY }}/ravitejareddy123/${{ env.DOCKER_IMAGE }}:latest --name demo-cluster || echo "Failed to load image"
      - name: Run Deploy Agent
        run: python deploy_agent.py || echo "Deploy agent failed"
      - name: Debug Deploy Report
        run: |
          ls -l deploy_report.json || echo "No deploy_report.json found"
          cat deploy_report.json || echo "No deploy_report.json found"
      - name: Upload Deploy Report
        uses: actions/upload-artifact@v4
        with:
          name: deploy-report
          path: deploy_report.json
        if: always()

  train:
    runs-on: ubuntu-latest
    needs: deploy
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Train Build Agent
        run: python train_agents.py build || echo "Train build agent failed"
      - name: Train Test Agent
        run: python train_agents.py test || echo "Train test agent failed"
      - name: Train Deploy Agent
        run: python train_agents.py deploy || echo "Train deploy agent failed"
      - name: Train Log Analyst Agent
        run: python train_agents.py log_analyst || echo "Train log analyst failed"

  log-analysis:
    runs-on: ubuntu-latest
    needs: deploy
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move Artifacts to Root
        run: |
          mv artifacts/build-report/build_report.json . || echo "No build_report.json"
          mv artifacts/test-report/test_report.json . || echo "No test_report.json"
          mv artifacts/deploy-report/deploy_report.json . || echo "No deploy_report.json"
      - name: Debug Artifacts
        run: |
          ls -l *.json || echo "No JSON files found"
          cat build_report.json || echo "No build_report.json found"
          cat test_report.json || echo "No test_report.json found"
          cat deploy_report.json || echo "No deploy_report.json found"
      - name: Run Log Analysis
        run: python autogen_log_analysis.py || echo "Log analysis failed"
      - name: Debug Reports
        run: |
          ls -l *.json *.html || echo "No reports found"
          cat index.html || echo "No index.html found"
          cat log_analysis_report.html || echo "No log_analysis_report.html found"
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            build_report.json
            test_report.json
            deploy_report.json
            log_analysis_report.html
            index.html
        if: always()

  deploy-pages:
    runs-on: ubuntu-latest
    needs: log-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download Reports
        uses: actions/download-artifact@v4
        with:
          name: reports
          path: .
      - name: Debug Downloaded Artifacts
        run: |
          ls -l *.json *.html || echo "No files downloaded"
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: gh-pages
          keep_files: false
      - name: Debug GitHub Pages Files
        run: |
          ls -l *.json *.html || echo "No files to deploy"
